import React, { useState } from 'react';

/**
 * Accessible contact form with validation
 * Includes proper labels and error messages
 */
const ContactForm = () => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    message: ''
  });
  
  const [errors, setErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitSuccess, setSubmitSuccess] = useState(false);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const validate = () => {
    const newErrors = {};
    
    if (!formData.name.trim()) {
      newErrors.name = 'Name is required';
    }
    
    if (!formData.email.trim()) {
      newErrors.email = 'Email is required';
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      newErrors.email = 'Email is invalid';
    }
    
    if (!formData.message.trim()) {
      newErrors.message = 'Message is required';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    
    if (validate()) {
      setIsSubmitting(true);
      
      // Simulate form submission
      setTimeout(() => {
        setIsSubmitting(false);
        setSubmitSuccess(true);
        setFormData({ name: '', email: '', message: '' });
        
        // Hide success message after 5 seconds
        setTimeout(() => {
          setSubmitSuccess(false);
        }, 5000);
      }, 1500);
    }
  };

  return (
    <section 
      id="contact" 
      className="py-20 px-6 bg-gray-100"
      aria-labelledby="contact-heading"
    >
      <div className="container mx-auto max-w-4xl">
        <h2 id="contact-heading" className="text-3xl md:text-4xl font-serif text-center mb-12">
          Get In Touch
        </h2>
        
        <div className="bg-white p-8 md:p-12 shadow-lg">
          {submitSuccess && (
            <div 
              className="mb-6 p-4 bg-green-100 text-green-800 rounded"
              role="alert"
            >
              Thank you for your message! I'll get back to you soon.
            </div>
          )}
          
          <form onSubmit={handleSubmit} noValidate>
            <div className="mb-6">
              <label 
                htmlFor="name" 
                className="block text-gray-700 mb-2"
              >
                Full Name
              </label>
              <input
                type="text"
                id="name"
                name="name"
                value={formData.name}
                onChange={handleChange}
                className={`w-full px-4 py-2 border ${errors.name ? 'border-red-500' : 'border-gray-300'} focus:outline-none focus:ring-2 focus:ring-gray-700`}
                aria-describedby={errors.name ? "name-error" : undefined}
                aria-invalid={!!errors.name}
                required
              />
              {errors.name && (
                <p id="name-error" className="mt-1 text-sm text-red-600">
                  {errors.name}
                </p>
              )}
            </div>
            
            <div className="mb-6">
              <label 
                htmlFor="email" 
                className="block text-gray-700 mb-2"
              >
                Email Address
              </label>
              <input
                type="email"
                id="email"
                name="email"
                value={formData.email}
                onChange={handleChange}
                className={`w-full px-4 py-2 border ${errors.email ? 'border-red-500' : 'border-gray-300'} focus:outline-none focus:ring-2 focus:ring-gray-700`}
                aria-describedby={errors.email ? "email-error" : undefined}
                aria-invalid={!!errors.email}
                required
              />
              {errors.email && (
                <p id="email-error" className="mt-1 text-sm text-red-600">
                  {errors.email}
                </p>
              )}
            </div>
            
            <div className="mb-8">
              <label 
                htmlFor="message" 
                className="block text-gray-700 mb-2"
              >
                Your Message
              </label>
              <textarea
                id="message"
                name="message"
                rows="5"
                value={formData.message}
                onChange={handleChange}
                className={`w-full px-4 py-2 border ${errors.message ? 'border-red-500' : 'border-gray-300'} focus:outline-none focus:ring-2 focus:ring-gray-700`}
                aria-describedby={errors.message ? "message-error" : undefined}
                aria-invalid={!!errors.message}
                required
              ></textarea>
              {errors.message && (
                <p id="message-error" className="mt-1 text-sm text-red-600">
                  {errors.message}
                </p>
              )}
            </div>
            
            <button
              type="submit"
              className="w-full bg-black text-white py-3 px-6 uppercase tracking-wider hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-gray-700 focus:ring-offset-2 transition duration-200"
              disabled={isSubmitting}
            >
              {isSubmitting ? 'Sending...' : 'Send Message'}
            </button>
          </form>
        </div>
      </div>
    </section>
  );
};

export default ContactForm;
